/*global YUI*/

YUI.add('Microframe', function (Y) {
    'use strict';

    /**
     Microframe Mojit. Replaces HTMLFrameMojit to handle assets and binders using MicroDeploy addon.

     @class Microframe
     **/
    Y.mojito.controller = {

        /**
         Controller index action.

         @method index
         @param {Object} ac Action Context.
         **/
        index: function (ac) {
            // Grab the "child" from the config an add it as the
            // only item in the "children" map.
            var cache = ac.config.get('cache'),
                child = ac.config.get('child'),
                cfg;

            // Map the action to the child
            child.action = ac.action;

            // Create a config object for the composite addon
            cfg = {
                children: {
                    child: child
                }
            };

            // add cache headers
            if (cache === false) {
                ac.http.addHeader('Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate');
                ac.http.addHeader('Pragma', 'no-cache');
                ac.http.addHeader('Expires', '-1');
            } else if (typeof cache === 'number') {
                ac.http.addHeader('Cache-Control', 'public, max-age=' + cache);
            }

            // add base Javascript files. It must be called before executing the children to add YUI3 seed as the first script tag.
            ac.microdeploy.addBaseJs();

            // execute children
            ac.composite.execute(cfg, function (data, meta) {
                var binders = ac.microdeploy.processBinders(meta.binders, meta.assets),
                    assets = Y.mojito.util.metaMerge(ac.assets.getAssets(), meta.assets);

                // Make sure we have meta
                meta.http = meta.http || {};
                meta.http.headers = meta.http.headers || {};

                // Make sure our Content-type is HTML
                meta.http.headers['content-type'] = 'text/html; charset="utf-8"';

                // Set the default data
                data.title = ac.config.get('title') || 'Powered by Mojito ' + Y.mojito.version;

                // Build top and bottom blobs
                data.top = ac.microdeploy.buildTopBlob(assets);
                data.bottom = ac.microdeploy.buildBottomBlob(assets, binders);

                // Render the view
                ac.done(data, meta);

            });
        }

    };

}, '0.0.2', {requires: ['microdeploy-addon']});