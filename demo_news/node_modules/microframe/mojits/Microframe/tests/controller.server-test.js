/*jslint node: true, unparam: true, sloppy: true */
/*global YUI,YUITest*/

YUI.add('Microframe-tests', function (Y, NAME) {
    var suite = new YUITest.TestSuite(NAME),
        controller = null,
        A = YUITest.Assert;

    suite.add(new YUITest.TestCase({

        name: 'Microframe tests',

        setUp: function () {
            controller = Y.mojito.controller;
        },

        tearDown: function () {
            controller = null;
        },

        initAc: function (config, doneCallback) {
            var ac = new Y.mojito.MockActionContext({
                addons: ['microdeploy', 'config', 'assets', 'composite', 'http']
            });

            ac.microdeploy.expect({
                method: 'addBaseJs',
                callCount: 1
            });

            ac.microdeploy.expect({
                method: 'processBinders',
                callCount: 1,
                args: [YUITest.Mock.Value.Object, YUITest.Mock.Value.Object],
                returns: []
            });

            ac.microdeploy.expect({
                method: 'buildTopBlob',
                callCount: 1,
                args: [YUITest.Mock.Value.Object],
                returns: 'top markup'
            });


            ac.microdeploy.expect({
                method: 'buildBottomBlob',
                callCount: 1,
                args: [YUITest.Mock.Value.Object, YUITest.Mock.Value.Object],
                returns: 'bottom markup'
            });

            ac.config.expect({
                method: 'get',
                args: [YUITest.Mock.Value.String],
                callCount: 3,
                run: function (key) {
                    return config[key];
                }
            });

            ac.assets.expect({
                method: 'getAssets',
                returns: {}
            });

            ac.composite.expect({
                method: 'execute',
                callCount: 1,
                args: [YUITest.Mock.Value.Object, YUITest.Mock.Value.Function],
                run: function (cfg, callback) {
                    callback({}, {
                        binders: {},
                        assets: {}
                    });
                }
            });

            ac.expect({
                method: 'done',
                callCount: 1,
                args: [YUITest.Mock.Value.Object, YUITest.Mock.Value.Object],
                run: function (data, meta) {
                    doneCallback(data, meta);
                }
            });

            config.action = config.action || 'index';
            config.child = config.child || {};

            return ac;
        },

        'test noConfig': function () {
            var ac = this.initAc({}, function () {});

            controller.index(ac);

            /* verify mocks expectations */
            YUITest.Mock.verify(ac);
            YUITest.Mock.verify(ac.microdeploy);
            YUITest.Mock.verify(ac.config);
            YUITest.Mock.verify(ac.assets);
            YUITest.Mock.verify(ac.composite);
            YUITest.Mock.verify(ac.http);
        },

        'test customTitle': function () {
            var customTitle = 'Unit Test - Title',
                ac = this.initAc({
                    title: customTitle
                }, function (data) {
                    A.areSame(customTitle, data.title);
                });

            controller.index(ac);

            /* verify mocks expectations */
            YUITest.Mock.verify(ac);
            YUITest.Mock.verify(ac.microdeploy);
            YUITest.Mock.verify(ac.config);
            YUITest.Mock.verify(ac.assets);
            YUITest.Mock.verify(ac.composite);
            YUITest.Mock.verify(ac.http);
        },

        'test cache:noHeaders': function () {
            var ac = this.initAc({}, function () {
            });

            ac.http.expect({
                method: 'addHeader',
                callCount: 0
            });

            controller.index(ac);

            /* verify mocks expectations */
            YUITest.Mock.verify(ac);
            YUITest.Mock.verify(ac.microdeploy);
            YUITest.Mock.verify(ac.config);
            YUITest.Mock.verify(ac.assets);
            YUITest.Mock.verify(ac.composite);
            YUITest.Mock.verify(ac.http);
        },

        'test cache:no-explicit': function () {
            var headers = {},
                ac = this.initAc({
                    cache: false
                }, function () {
                    A.isTrue(headers['Cache-Control'].indexOf('no-cache') >= 0);
                    A.isTrue(headers['Cache-Control'].indexOf('max-age=0') >= 0);
                    A.areSame('no-cache', headers.Pragma);
                    A.areSame('-1', headers.Expires);
                });

            ac.http.expect({
                method: 'addHeader',
                callCount: 3,
                args: [YUITest.Mock.Value.String, YUITest.Mock.Value.String],
                run: function (key, value) {
                    headers[key] = value;
                }
            });

            controller.index(ac);

            /* verify mocks expectations */
            YUITest.Mock.verify(ac);
            YUITest.Mock.verify(ac.microdeploy);
            YUITest.Mock.verify(ac.config);
            YUITest.Mock.verify(ac.assets);
            YUITest.Mock.verify(ac.composite);
            YUITest.Mock.verify(ac.http);
        },

        'test cache:OneHour': function () {
            var headers = {},
                ac = this.initAc({
                    cache: 3600
                }, function () {
                    A.isTrue(headers['Cache-Control'].indexOf('max-age=3600') >= 0);
                });

            ac.http.expect({
                method: 'addHeader',
                callCount: 1,
                args: [YUITest.Mock.Value.String, YUITest.Mock.Value.String],
                run: function (key, value) {
                    headers[key] = value;
                }
            });

            controller.index(ac);

            /* verify mocks expectations */
            YUITest.Mock.verify(ac);
            YUITest.Mock.verify(ac.microdeploy);
            YUITest.Mock.verify(ac.config);
            YUITest.Mock.verify(ac.assets);
            YUITest.Mock.verify(ac.composite);
            YUITest.Mock.verify(ac.http);
        }
    }));

    YUITest.TestRunner.add(suite);

}, '0.0.1', {requires: ['mojito-test', 'Microframe']});