/*jslint unparam: true */
/*global YUI*/

/*
 Cache with all the dependencies. It makes the dependency filtering process faster.
 */
var requiresCache = {};

/*
 Removes duplicates from an array. Duplicates are left as null.
 @param {Array} arr Array to remove duplicates from.
 */
function removeDuplicates(arr) {
    'use strict';
    var i;
    for (i = 1; i < arr.length; i += 1) {
        if (arr.lastIndexOf(arr[i], i - 1) >= 0) {
            arr[i] = null;
        }
    }
}

/*
 Combo an array of URLs for a specific domain.
 @param {Array} urls Array of URLs.
 @param {String} domain Domain of the URLs to combo.
 @return {String} Combo'd URL.
 */
function combo(urls, domain) {
    'use strict';
    var i,
        tmp = [];

    for (i = 0; i < urls.length; i += 1) {
        if (urls[i] && urls[i].indexOf(domain) === 0) {
            tmp.push(urls[i]);
            urls[i] = null;
        }
    }
    if (tmp.length > 1) {
        tmp = domain +
            (domain.indexOf('yui.yahooapis.com') >= 0 ? '' : 'zz/') +
            'combo?' +
            tmp.join('&').replace(/http:\/\/[a-zA-Z0-9\-_\.]+\/((zz\/)?combo\?)?/g, '');
    } else if (tmp.length > 0) {
        tmp = tmp[0];
    } else {
        tmp = null;
    }
    return tmp;
}

/*
 Combo an array of URLs. URLs can belong to many domains, this function will return an array
 of all URLs after being combo'd.
 * @param {Array} urls Array of URLs.
 * @param {Array} domains Array to domains to combo.
 * @return {Array} Array of combo'd URLs. It also includes URLs that couldn't be combo'd.
 */
function comboUrls(urls, domains) {
    'use strict';
    var tmp = [],
        i,
        url;

    removeDuplicates(urls);

    for (i = 0; i < domains.length; i += 1) {
        url = combo(urls, 'http://' + domains[i] + '/');
        if (url) {
            tmp.push(url);
        }
    }

    for (i = 0; i < urls.length; i += 1) {
        if (urls[i]) {
            tmp.push(urls[i]);
        }
    }

    return tmp;
}

/*
 Builds the <link> tags for a list of CSS URLs.
 @param {Array} urls Array of URLs.
 @param {Array} domains Array of domains to combo.
 @return {String} All <link> tags concatenated.
 */
function addCssFiles(urls, domains) {
    'use strict';
    var i,
        data = '';

    if (urls) {
        urls = comboUrls(urls, domains);

        for (i = 0; i < urls.length; i += 1) {
            data += '<link rel="stylesheet" type="text/css" href="' + urls[i] + '"/>\n';
        }
    }

    return data;
}

/*
 Builds the <script> tags for a list of JS URLs.
 @param {Array} urls Array of URLs.
 @param {Array} domains Array of domains to combo.
 @return {String} All <script> tags concatenated.
 */
function addJsFiles(urls, domains) {
    'use strict';
    var i,
        data = '';

    if (urls) {
        urls = comboUrls(urls, domains);

        for (i = 0; i < urls.length; i += 1) {
            data += '<script type="text/javascript" src="' + urls[i] + '"></script>\n';
        }
    }

    return data;
}

/*
 Concatenates all blobs.
 @param {Array} contents Array of blobs.
 @return {String} Blobs concatenated.
 */
function addBlobs(contents) {
    'use strict';
    var i,
        data = '';

    if (contents) {
        for (i = 0; i < contents.length; i += 1) {
            data += contents[i] + '\n';
        }
    }

    return data;
}

/*
 Adds all Javascript files required for a binder. It includes all required autoloads.
 @param {Object} binder Binder instance.
 @param {String} assetsPrefix Assets prefix.
 @param {Object} micro MicroAddon instance.
 */
function addBinderRequirements(binder, assetsPrefix, micro) {
    'use strict';
    var requirements = requiresCache[binder.name],
        key,
        path,
        i;

    if (!requirements) {
        requirements = [];
        for (key in binder.needs) {
            if (binder.needs.hasOwnProperty(key)) {
                path = binder.needs[key];
                if (path.indexOf(assetsPrefix) === 0) {
                    if (path.indexOf('mojito/') !== assetsPrefix.length) {
                        requirements.push(path.substring(assetsPrefix.length));
                    }
                }
            }
        }
        requiresCache[binder.name] = requirements;
    }

    for (i = 0; i < requirements.length; i += 1) {
        micro.addJs(requirements[i]);
    }
}

/*
 Builds the binder initialization.
 @param {Array} binders Array of binders.
 @param {Object} appConfig Application configuration.
 @param {Object} context Current request context.
 @return {String} Binder initialization blob. It is a <script> tag.
 */
function addBinderInitialization(binders, appConfig, context) {
    'use strict';
    var i,
        runtime,
        data = '';

    if (!binders) {
        binders = [];
    }

    data += '<script type="text/javascript">YUI(';
    data += ((appConfig.yui && appConfig.yui.config) ? JSON.stringify(appConfig.yui.config) : '{lang:"{lang}",maxURLLength:2000}').replace(/\{lang\}/, context.lang);
    data += ').use(\'micro\',';
    for (i = 0; i < binders.length; i += 1) {
        data += '\'' + binders[i].module + '\',';
    }
    data += 'function(Y){Y.Micro.Init({tunnel:\'';
    data += appConfig.tunnelPrefix;
    data += '\',context: ';
    runtime = context.runtime;
    context.runtime = 'client'; // reuse the same object
    data += JSON.stringify(context);
    context.runtime = runtime;
    data += '},';
    data += JSON.stringify(binders);
    data += ');});</script>';

    return data;
}

YUI.add('microdeploy-addon', function (Y, NAME) {
    'use strict';

    /**
     Microframe deploy addon. It generates the markup to include all assets and binders. All CSS and Javascript
     files are combo'd. Binder initialization code is also generated.

     @class MicroDeployAddon
     @constructor
     @param {Object} command Mojit command.
     @param {Object} adapter Mojit output adapter.
     @param {Object} ac Mojit Action Context.
     **/
    function MicroDeployAddon(command, adapter, ac) {
        this.ac = ac;
        this.appConfig = ac.app.config;
        this.assetsPrefix = '/' + (Y.Object.getValue(this.appConfig.staticHandling, ['prefix']) || 'static') + '/';
        this.comboDomains = Y.Object.getValue(this.appConfig.staticHandling, ['combo']) || [ 'yui.yahooapis.com', 'l.yimg.com' ];
        this.deploy = ac.config.get('deploy') === true;
    }

    MicroDeployAddon.prototype = {

        /**
         Namespace.

         @property namespace
         @type String
         @default "microdeploy"
         @final
         **/
        namespace: 'microdeploy',

        /**
         Adds the base Javascript files. Includes YUI seed and Microframe client code.

         @method addBaseJs
         **/
        addBaseJs: function () {
            if (this.deploy) {
                this.ac.micro.addJs(Y.Object.getValue(this.appConfig.yui, ['url']) || 'http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js');
                this.ac.micro.addJs('Microframe/autoload/micro.client.js');
            }
        },

        /**
         Transforms binders from standard Mojito to Microframe reduced format.

         @method processBinders
         @param {Object} bindersMap All binders from Mojito.
         @param {Object} assets All assets, used to pull custom binders configuration and selector.
         **/
        processBinders: function (bindersMap, assets) {
            var binders = [],
                binder,
                cleanBinder,
                key;

            if (this.deploy) {
                for (key in bindersMap) {
                    if (bindersMap.hasOwnProperty(key)) {
                        binder = bindersMap[key];
                        if (binder.name) {
                            cleanBinder = {
                                module: binder.name,
                                type: binder.type,
                                action: binder.action,
                                instanceId: binder.instanceId,
                                selector: (assets.binderSelector && assets.binderSelector[binder.instanceId]) ? assets.binderSelector[binder.instanceId] : '#' + binder.viewId,
                                config: assets.binderConfig ? (assets.binderConfig[binder.instanceId] || null) : null
                            };

                            if (cleanBinder.config === true) {
                                cleanBinder.config = binder.config;
                            }

                            addBinderRequirements(binder, this.assetsPrefix, this.ac.micro);
                            binders.push(cleanBinder);
                        }
                    }
                }
            }

            return binders;
        },

        /**
         Builds the top (header) blob with all CSS, JS and Blobs added.
         @method buildTopBlob
         @param {Object} assets All assets added to the page.
         @return {String} Top blob with all markup required.
         */
        buildTopBlob: function (assets) {
            return addCssFiles(Y.Object.getValue(assets, ['top', 'css']), this.comboDomains) +
                addBlobs(Y.Object.getValue(assets, ['top', 'blob'])) +
                addJsFiles(Y.Object.getValue(assets, ['top', 'js']), this.comboDomains);
        },

        /**
         Builds the bottom blob with all CSS, JS, Blobs, Binders and Binder initialization added.
         @method buildBottomBlob
         @param {Object} assets All assets added to the page.
         @param {Array} binders Array of binders.
         @return {String} Bottom blob with all markup required.
         */
        buildBottomBlob: function (assets, binders) {
            return addCssFiles(Y.Object.getValue(assets, ['bottom', 'css']), this.comboDomains) +
                addJsFiles(Y.Object.getValue(assets, ['bottom', 'js']), this.comboDomains) +
                (this.deploy ? (addBinderInitialization(binders, this.appConfig, this.ac.context)) : '') +
                addBlobs(Y.Object.getValue(assets, ['bottom', 'blob']));

        }
    };

    Y.mojito.addons.ac.microdeploy = MicroDeployAddon;

}, '0.0.2', {requires: ['micro-addon', 'mojito-config-addon']});