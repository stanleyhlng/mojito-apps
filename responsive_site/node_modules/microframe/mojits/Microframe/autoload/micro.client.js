/*jslint unparam: true */
/*global YUI,document*/

YUI.add('micro', function (Y) {
    'use strict';

    var txId = 1;

    /**
     MojitProxy implementation for Microframe. A reduced implementation of Mojito's MojitProxy for a smaller footprint and
     focus on performance.

     @class MojitProxy
     @constructor
     @param {Object} options MojitProxy options.
     @param {Object} binderInstance Binder instance for this MojitProxy.
     **/
    function MojitProxy(options, binderInstance) {
        Y.mix(this, options);
        this.binderInstance = binderInstance;
    }

    MojitProxy.prototype = {

        /**
         Invoke a controller action.

         @method invoke
         @param {String} action Action to invoke in the controller.
         @param {Object} options Options for the invoke, only the params value is used. See: http://developer.yahoo.com/cocktails/mojito/api/classes/MojitProxy.html#method_invoke
         @param {Object} [options.params] Parameters to send to the controller. Supports route, url, body and file parameters.
         @param {Function} callback Function to call with the controller response. Sends 3 parameters: error, response data, response metadata.
         **/
        invoke: function (action, options, callback) {
            var params = (options ? options.params : null) || {};
            if (!callback) {
                callback = function () {};
            }
            Y.io(this.appConfig.tunnel, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                data: Y.JSON.stringify({
                    reqs: [
                        {
                            handler: 'cfg.dali.handler.ws',
                            data: {
                                instance: {
                                    type: this.type,
                                    guid: this.instanceId,
                                    instanceId: this.instanceId,
                                    config: this.config
                                },
                                action: action,
                                params: {
                                    route: params.route || {},
                                    url: params.url || Y.QueryString.parse(document.location.search),
                                    body: params.body || {},
                                    file: params.file || {}
                                },
                                rpc: false,
                                context: this.context,
                                forcepost: true,
                                method: 'GET'
                            },
                            batchable: false,
                            forcepost: false,
                            txId: (txId += 1)
                        }
                    ],
                    props: {
                        dali: {}
                    }
                }),
                on: {
                    success: function (err, result) {
                        var daliResponse = Y.JSON.parse(result.responseText),
                            response = Y.Object.getValue(daliResponse, ['resps', 0]),
                            data = response ? response.data : null,
                            contentType;
                        if (response.status >= 200 && response.status < 300) {
                            if (data && data.html && data.meta) {
                                contentType = Y.Object.getValue(data.meta, ['http', 'headers', 'content-type', 0]);
                                if (contentType && contentType.indexOf('application/json') >= 0) {
                                    data.html = Y.JSON.parse(data.html);
                                }
                                callback(null, data.html, data.meta);
                            } else {
                                callback({
                                    message: 'Invalid Response',
                                    status: response.status,
                                    data: data
                                });
                            }
                        } else {
                            callback({
                                message: 'Server Error',
                                status: response.status,
                                data: data
                            });
                        }
                    },
                    error: function (err, result) {
                        callback({
                            message: result.statusText,
                            status: result.status
                        });
                    }
                }
            });
        },

        /**
         Refreshes the mojit markup by invoking the current controller action. If the binder has a 'onRefreshView' method, it will
         be executed with the new node.

         @method refreshView
         @param {Object} options Options for the invoke, only the params value is used. See: http://developer.yahoo.com/cocktails/mojito/api/classes/MojitProxy.html#method_invoke
         @param {Object} [options.params] Parameters to send to the controller. Supports route, url, body and file parameters.
         @param {Function} callback Function to call with the controller response. Sends 3 parameters: error, response data, response metadata.
         **/
        refreshView: function (options, callback) {
            var me = this;
            this.invoke(this.action, options, function (err, data, meta) {
                var newNode;
                if (!err && me.node) {
                    newNode = Y.Node.create(data);
                    me.node.replace(newNode);
                    me.node = newNode;
                    if (Y.Lang.isFunction(me.binderInstance.onRefreshView)) {
                        me.binderInstance.onRefreshView(newNode, meta);
                    }
                }
                if (callback) {
                    callback(err, data, meta);
                }
            });
        },

        /**
         Listen for events from other mojits.

         @method listen
         @param {String} eventName Event to listen for.
         @param {Function} callback Function to call when an event is received.
         **/
        listen: function (eventName, callback) {
            Y.on('mp:' + eventName, function (data) {
                callback({
                    data: data
                });
            });
        },

        /**
         Broadcast an event.

         @method broadcast
         @param {String} eventName Event to broadcast.
         @param {Object} data Data to send as part of the event.
         **/
        broadcast: function (eventName, data) {
            Y.fire('mp:' + eventName, data);
        }
    };

    /*
     Instantiate an object from a prototype definition.
     */
    function heir(o) {
        function F() {
        }

        F.prototype = o;
        return new F();
    }

    /*
     Initializes a binder.
     */
    function initBinder(options, appConfig, parent) {
        var instance,
            module = Y.mojito.binders[options.module],
            node = (parent || Y).one(options.selector);

        if (module) {
            options.config = options.config || {};
            options.appConfig = appConfig;
            options.context = appConfig.context;
            options.node = node;

            instance = heir(module);
            instance.init(new MojitProxy(options, instance));
            if (node) {
                instance.bind(node);
            }
        }
    }

    /**
     Contains the logic to initialize binders in the client.

     @class Micro
     **/
    Y.Micro = {

        /**
         Initialize client-side logic.

         @method Init
         @param {Object} appConfig Application configuration. Contains tunnel prefix and context.
         @param {Array} binders Array of binders to initialize.
         @param {Object} [parent] Parent node for the binders. By default uses 'document'.
         **/
        Init: function (appConfig, binders, parent) {
            var i;

            Y.namespace('mojito.binders');

            for (i = 0; i < binders.length; i += 1) {
                initBinder(binders[i], appConfig, parent);
            }
        }
    };

}, '0.0.2', {requires: ['node', 'io-base', 'json', 'querystring-parse']});