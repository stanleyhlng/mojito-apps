/*jslint node: true, unparam: true, sloppy: true, stupid: true, nomen: true */
/*global YUI,YUITest*/

YUI.add('micro-tests', function (Y, NAME) {
    var suite = new YUITest.TestSuite(NAME),
        A = YUITest.Assert,
        fs = require('fs');

    suite.add(new YUITest.TestCase({

        name: 'micro (client autoload) tests',

        setUp: function () {
            this.markup = Y.Node.create(fs.readFileSync(__dirname + '/data/markup01.html', 'utf8'));
            this.defaultInvokeOptions = {
                params: {
                    url: {}
                }
            };
        },

        tearDown: function () {
            this.markup = null;
        },

        createBinder: function (name, init, bind, onRefreshView) {
            var binder = Y.namespace('mojito.binders')[name] = {
                init: init,
                bind: bind,
                onRefreshView: onRefreshView
            };

            if (!binder.init) {
                binder.init = function (mojitProxy) {
                    this.mp = mojitProxy;
                };
            }

            if (!binder.bind) {
                binder.bind = function () {};
            }

            return name;
        },

        init: function (binderName, binderConfig, appConfig) {
            Y.Micro.Init(appConfig || {}, [
                {
                    module: binderName,
                    selector: '#testBinder',
                    config: binderConfig
                }
            ], this.markup);
        },

        simulateIO: function (response, callback) {
            Y.io = function (url, config) {
                if (callback) {
                    callback(url, config);
                }
                config.on.success(null, {
                    responseText: JSON.stringify({
                        resps: [response]
                    })
                });
            };
        },

        simulateIOError: function (response) {
            Y.io = function (url, config) {
                config.on.error({}, response);
            };
        },

        'test micro:init': function () {
            var me = this,
                config = {
                    test: true
                };

            A.isNotNull(Y.Micro);
            A.isNotNull(Y.Micro.Init);

            this.init(this.createBinder('MicroInitBinder', function (mojitProxy) {
                this.mojitProxy = mojitProxy;
                A.areSame(config, mojitProxy.config);
                A.areSame(this, mojitProxy.binderInstance);
            }, function (node) {
                A.areSame(me.markup.one('#testBinder'), node);
                A.areSame(node, this.mojitProxy.node);
            }), config);
        },

        'test micro:listenAndBroadcast': function () {
            var configListen = {
                    listen: true
                },
                configBroadcast = {
                    broadcast: true
                },
                data = {
                    'hasToBeSameObject': true
                },
                dataListened;

            Y.Micro.Init({}, [
                {
                    module: this.createBinder('MicroListenBroadcast', function (mojitProxy) {
                        if (mojitProxy.config.listen) {
                            mojitProxy.listen('unit-test', function (payload) {
                                A.areSame(data, payload.data);
                                dataListened = payload.data;
                            });
                        }

                        if (mojitProxy.config.broadcast) {
                            setTimeout(function () {
                                mojitProxy.broadcast('unit-test', data);
                            }, 10);
                        }
                    }),
                    selector: '#testBinder',
                    config: configListen
                },
                {
                    module: 'MicroListenBroadcast',
                    selector: '#testBinder',
                    config: configBroadcast
                }
            ], this.markup);

            this.wait(function () {
                A.areSame(data, dataListened);
            }, 100);
        },

        'test micro:invoke': function () {
            var tunnel = '/tunnel',
                invokeResult = '<div></div>';

            this.simulateIO({
                status: 200,
                data: {
                    html: invokeResult,
                    meta: {}
                }
            }, function (url, config) {
                var body = JSON.parse(config.data);
                A.areSame(tunnel, url);
                A.areSame('cfg.dali.handler.ws', body.reqs[0].handler);
                A.areSame('route', body.reqs[0].data.params.route.param1);
                A.areSame('url', body.reqs[0].data.params.url.param1);
                A.areSame('body', body.reqs[0].data.params.body.param1);
                A.areSame('file', body.reqs[0].data.params.file.param1);
            });

            this.init(this.createBinder('MicroInvokeHTMLSuccess', undefined, function () {
                this.mp.invoke('unittest', {
                    params: {
                        route: {
                            param1: 'route'
                        },
                        url: {
                            param1: 'url'
                        },
                        body: {
                            param1: 'body'
                        },
                        file: {
                            param1: 'file'
                        }
                    }
                }, function (err, result) {
                    A.isNull(err);
                    A.areSame(invokeResult, result);
                });
            }), null, {
                tunnel: tunnel
            });
        },

        'test micro:invokeJSON': function () {
            var me = this;

            this.simulateIO({
                status: 200,
                data: {
                    html: JSON.stringify({
                        key: 'value'
                    }),
                    meta: {
                        http: {
                            headers: {
                                'content-type': ['application/json']
                            }
                        }
                    }
                }
            });

            this.init(this.createBinder('MicroInvokeJSONSuccess', undefined, function () {
                this.mp.invoke('unittest', me.defaultInvokeOptions, function (err, result) {
                    A.isNull(err);
                    A.isObject(result);
                    A.areSame('value', result.key);
                });
            }));
        },

        'test micro:invokeIOError': function () {
            var me = this;

            this.simulateIOError({
                status: 500,
                statusText: 'Server Error'
            });

            this.init(this.createBinder('MicroInvokeIOError', undefined, function () {
                this.mp.invoke('unittest', me.defaultInvokeOptions, function (err, result) {
                    A.isNotNull(err);
                    A.areSame(500, err.status);
                    A.areSame('Server Error', err.message);
                });
            }));
        },

        'test micro:invokeBadDaliResponse': function () {
            var me = this;

            this.simulateIO({
                status: 200,
                data: {
                    html: '<div></div>'
                }
            });

            this.init(this.createBinder('MicroInvokeBadDaliResponse', undefined, function () {
                this.mp.invoke('unittest', me.defaultInvokeOptions, function (err, result) {
                    A.isNotNull(err);
                });
            }));
        },

        'test micro:invokeDaliServerError': function () {
            var me = this;

            this.simulateIO({
                status: 500,
                data: {
                    html: '<div></div>',
                    meta: {}
                }
            });

            this.init(this.createBinder('MicroInvokeDaliServerError', undefined, function () {
                this.mp.invoke('unittest', me.defaultInvokeOptions, function (err, result) {
                    A.isNotNull(err);
                });
            }));
        },

        'test micro:invokeNoCallback': function () {
            var me = this;

            this.simulateIO({
                status: 200,
                data: {
                    html: '<div></div>',
                    meta: {}
                }
            });

            this.init(this.createBinder('MicroInvokeNoCallback', undefined, function (node) {
                A.isNotNull(node);
                A.isFunction(this.mp.invoke);
                this.mp.invoke('unittest', me.defaultInvokeOptions);
            }));
        },

        'test micro:refreshView': function () {
            var me = this,
                refreshViewCalled = false;

            this.simulateIO({
                status: 200,
                data: {
                    html: '<div id="testBinder"><span class="refreshed"></span></div>',
                    meta: {}
                }
            });

            this.init(this.createBinder('MicroRefreshView', undefined, function (node) {
                A.isNotNull(node);

                this.mp.refreshView(me.defaultInvokeOptions, function (err, data, meta) {
                    A.isTrue(refreshViewCalled);
                });
            }, function (node) {
                A.isNotNull(node);
                A.isNotNull(node.one('span.refreshed'));
                refreshViewCalled = true;
            }));
        }


    }));

    YUITest.TestRunner.add(suite);

}, '0.0.1', {requires: ['mojito-test', 'micro', 'selector-css3']});