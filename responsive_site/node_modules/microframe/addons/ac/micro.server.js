/*jslint unparam: true, nomen: true */
/*global YUI,require,__dirname*/

var assetsDefinitionsLoaded = false,
    assetsDefinitionsLoading = false,
    assetsDefinitions = {},
    assetsAppName = '';

/*
 Loads the assets definitions from the assets.json files.
 By default it reads the assets.json from the application that adds the dependency and from microframe itself.
 It is possible to add other node.js modules by adding them to staticHandling { modules: [] } in application.json.
 */
function loadAssetsDefinitions(appConfig, Y) {
    'use strict';
    var staticHandling = appConfig.staticHandling || {},
        assetsMode = staticHandling.assetsMode || 'prod',
        definitionsRoot = staticHandling.definitionsRoot || '../../../../',
        modules = (Y.Lang.isArray(staticHandling.modules) ? staticHandling.modules : []).concat(['microframe', '']),
        async = require('async'),
        fs = require('fs');

    assetsAppName = staticHandling.appName || '';

    async.forEach(modules, function (module, callback) {
        var path = __dirname + '/' + definitionsRoot + (module === '' ? '' : 'node_modules/') + module.replace(/\//g, '') + '/assets.json', // removed all slashes to prevent access to other folders
            contents,
            key;
        try {
            contents = Y.Object.getValue(JSON.parse(fs.readFileSync(path, 'utf8')), [assetsMode]);
            if (contents) {
                for (key in contents) {
                    if (contents.hasOwnProperty(key)) {
                        assetsDefinitions[key.replace('{app}', assetsAppName)] = contents[key];
                    }
                }
            }
        } catch (e) {
            Y.log('Error reading ' + (module === '' ? '' : 'node_modules/' + module + '/') + 'assets.json', 'warn');
        }
        callback();

    }, function () {
        assetsDefinitionsLoaded = true;
        assetsDefinitionsLoading = false;
    });
}


YUI.add('micro-addon', function (Y, NAME) {
    'use strict';

    /**
     Microframe addon. Provides methods to add assets (CSS, JS, Blobs, Binders) and get URLs. It transforms all URLs based on
     assets.json definitions and application.json assetsMode configuration.

     @class MicroAddon
     @constructor
     @param {Object} command Mojit command.
     @param {Object} adapter Mojit output adapter.
     @param {Object} ac Mojit Action Context.
     **/
    function MicroAddon(command, adapter, ac) {
        var previousAssets = ac.assets.getAssets(),
            waitTime = 0;

        this.assets = ac.assets;
        this.instance = command.instance;
        this.prefix = '/' + (Y.Object.getValue(ac.app.config.staticHandling, ['prefix']) || 'static') + '/';

        if (!assetsDefinitionsLoaded && !assetsDefinitionsLoading) {
            assetsDefinitionsLoading = true;
            loadAssetsDefinitions(ac.app.config, Y);
        }

        // This is an ugly work around to make the contructor wait until the assets are loaded.
        // This code will only be executed in the first requests, once the assets are loaded it won't affect.
        // There is no way to make a constructor async. We had to force because the code below, transform the
        // previously added assets, was executed after the Mojit execution ended for the first request. This
        // resulted in incorrect URLs for that first request.
        while (assetsDefinitionsLoading) {
            waitTime += 1; // prevent jslint empty block
        }

        // change the URLs for the previously added assets
        // this assets are taken from the module configuration and added by the assets addon
        if (previousAssets.top) { // for most mojits this will evaluate false
            this.changeArray(previousAssets.top.css);
            this.changeArray(previousAssets.top.js);
        }
        if (previousAssets.bottom) { // for most mojits this will evaluate false
            this.changeArray(previousAssets.bottom.css);
            this.changeArray(previousAssets.bottom.js);
        }
    }

    MicroAddon.prototype = {

        /**
         Namespace.

         @property namespace
         @type String
         @default "micro"
         @final
         **/
        namespace: 'micro',

        /**
         Adds a CSS to the page.

         @method addCss
         @param {String} content CSS URL. It will be transformed with getUrl.
         @param {String} [location=top] Location where the CSS will be added: top or bottom.
         **/
        addCss: function (content, location) {
            this.assets.addCss(this.getUrl(content), location);
        },

        /**
         Adds a Javascript to the page.

         @method addJs
         @param {String} content Javascript URL. It will be transformed with getUrl.
         @param {String} [location=bottom] Location where the Javascript will be added: top or bottom.
         **/
        addJs: function (content, location) {
            this.assets.addJs(this.getUrl(content), location);
        },

        /**
         Adds a blob to the page.

         @method addBlob
         @param {String} content Blob content.
         @param {String} [location=top] Location where the blob will be added: top or bottom.
         **/
        addBlob: function (content, location) {
            this.assets.addBlob(content, location);
        },

        /**
         Adds the binder configuration.

         @method addBinderConfig
         @param {Object} config Binder configuration.
         **/
        addBinderConfig: function (config) {
            var assets = this.assets.assets;

            if (!assets.binderConfig) {
                assets.binderConfig = {};
            }

            assets.binderConfig[this.instance.instanceId] = config;
        },

        /**
         Sets the binder configuration.

         @method addBinderSelector
         @param {String} selector CSS Selector to find the binder node.
         **/
        addBinderSelector: function (selector) {
            var assets = this.assets.assets;

            if (!assets.binderSelector) {
                assets.binderSelector = {};
            }

            assets.binderSelector[this.instance.instanceId] = selector;
        },

        /**
         Gets the final URL based on the staticHandling configuration and assets.json.<br/>
         It transforms the URLs in several ways:<br/>
         - If it starts with './' then it is considered to be located in the current Mojit.<br/>
         - If it starts with '../' then it is considered to be located at application level.<br/>
         - If it starts with '/' or 'http://' no transformation is made.<br/><br/>

         Then it will lookup the URL in the assets.json, if found it will return its value. If not it will return the
         transformed URL, with the static assets prefix.

         @method getUrl
         @param {String} url URL to transform.
         @return {String} Transformed URL.
         **/
        getUrl: function (url) {
            var newUrl = false;
            if (url && url.indexOf('/') !== 0 && url.indexOf('http://') !== 0) {
                if (url.indexOf('./') === 0) { // relative to current mojit
                    url = this.instance.type + url.replace('.', '');
                } else if (url.indexOf('../') === 0) { // relative to application
                    url = assetsAppName + url.replace('..', '');
                }

                newUrl = assetsDefinitions[url];
                if (!newUrl) {
                    url = this.prefix + url;
                }
            }
            return newUrl || url;
        },

        /**
         Transform all URLs in an array by invoking getUrl on all its elements.

         @method changeArray
         @param {Array} array Array to transform.
         **/
        changeArray: function (array) {
            var i;

            if (array) {
                for (i = 0; i < array.length; i += 1) {
                    array[i] = this.getUrl(array[i]);
                }
            }
        },

        /**
         Resets the assets definitions forcing assets.json to be loaded again.
         Use it carefully, it has a performance impact.

         @method reset
         **/
        reset: function () {
            assetsDefinitionsLoaded = false;
            assetsDefinitions = {};
        }
    };

    Y.mojito.addons.ac.micro = MicroAddon;

}, '0.0.2', {requires: ['mojito-assets-addon']});