/*jslint node: true, sloppy: true */
/*global YUI,YUITest */

YUI.add('micro-addon-tests', function (Y, NAME) {

    var suite = new YUITest.TestSuite(NAME),
        A = YUITest.Assert;

    suite.add(new YUITest.TestCase({

        name: 'micro-addon tests',

        setUp: function () {

            this.ac = new Y.mojito.MockActionContext({
                addons: ['assets']
            });

            this.ac.app = {};
            this.ac.app.config = {
                staticHandling: {
                    appName: 'MicroframeUnitTest',
                    assetsMode: 'prod',
                    definitionsRoot: '../../tests/data/'
                }
            };

            this.adapter = {};

            this.defaultCommand = {
                instance: {
                    type: 'Microframe',
                    action: 'index',
                    instanceId: 'test-instance-id',
                    config: {
                        def: true
                    }
                }
            };
        },

        tearDown: function () {
            if (this.addon) {
                this.addon.reset();
                this.addon = null;
            }
        },

        init: function (assetsMode, prefix, initialAssets) {
            var command = this.defaultCommand,
                ac = this.ac;

            if (assetsMode) {
                ac.app.config.staticHandling.assetsMode = assetsMode;
            }

            if (prefix) {
                ac.app.config.staticHandling.prefix = prefix;
            }

            initialAssets = initialAssets || {};
            this.ac.assets.assets = initialAssets;

            this.ac.assets.expect({
                method: 'getAssets',
                callCount: 1,
                returns: initialAssets
            });

            this.addon = new Y.mojito.addons.ac.micro(command, this.adapter, this.ac);

            return this.addon;
        },

        'test addon:initialAssets:dev': function () {
            var addon = this.init('dev', false, {
                top: {
                    css: [
                        'http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css',
                        './assets/css/top.css'
                    ],
                    js: [
                        'http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js',
                        './assets/js/top.js'
                    ]
                },
                bottom: {
                    css: [
                        'http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css',
                        './assets/css/bottom.css'
                    ],
                    js: [
                        'http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js',
                        './assets/js/bottom.js',
                        '../assets/js/app.js'
                    ]
                }
            }),
                assets = this.ac.assets.assets;

            A.isNotNull(addon);
            A.isTrue(assets.top.css.indexOf('http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css') >= 0);
            A.isTrue(assets.top.css.indexOf('/static/Microframe/assets/css/top.css') >= 0);
            A.isTrue(assets.top.js.indexOf('http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js') >= 0);
            A.isTrue(assets.top.js.indexOf('/static/Microframe/assets/js/top.js') >= 0);
            A.isTrue(assets.bottom.css.indexOf('http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css') >= 0);
            A.isTrue(assets.bottom.css.indexOf('/static/Microframe/assets/css/bottom.css') >= 0);
            A.isTrue(assets.bottom.js.indexOf('http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js') >= 0);
            A.isTrue(assets.bottom.js.indexOf('/static/Microframe/assets/js/bottom.js') >= 0);
            A.isTrue(assets.bottom.js.indexOf('/static/MicroframeUnitTest/assets/js/app.js') >= 0);
        },

        'test addon:initialAssets:prod': function () {
            var addon = this.init(false, false, {
                top: {
                    css: [
                        'http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css',
                        './assets/css/top.css'
                    ],
                    js: [
                        'http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js',
                        './assets/js/top.js'
                    ]
                },
                bottom: {
                    css: [
                        'http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css',
                        './assets/css/bottom.css'
                    ],
                    js: [
                        'http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js',
                        './assets/js/bottom.js',
                        '../assets/js/app.js'
                    ]
                }
            }),
                assets = this.ac.assets.assets;

            A.isNotNull(addon);
            A.isTrue(assets.top.css.indexOf('http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css') >= 0);
            A.isTrue(assets.top.css.indexOf('http://l.yimg.com/ep/cx/p/microframe/unit-test/top.css') >= 0);
            A.isTrue(assets.top.js.indexOf('http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js') >= 0);
            A.isTrue(assets.top.js.indexOf('http://l.yimg.com/ep/cx/p/microframe/unit-test/top.js') >= 0);
            A.isTrue(assets.bottom.css.indexOf('http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css') >= 0);
            A.isTrue(assets.bottom.css.indexOf('http://l.yimg.com/ep/cx/p/microframe/unit-test/bottom.css') >= 0);
            A.isTrue(assets.bottom.js.indexOf('http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js') >= 0);
            A.isTrue(assets.bottom.js.indexOf('http://l.yimg.com/ep/cx/p/microframe/unit-test/bottom.js') >= 0);
            A.isTrue(assets.bottom.js.indexOf('http://l.yimg.com/ep/cx/p/microframe/unit-test/app.js') >= 0);
        },

        'test addon:addCss:dev': function () {
            var addon = this.init('dev');

            this.ac.assets.expect({
                method: 'addCss',
                args: [YUITest.Mock.Value.String, undefined],
                run: function (url) {
                    A.isTrue(['/static/MicroframeUnitTest/assets/css/global.css', '/static/Microframe/assets/css/top.css', 'http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css'].indexOf(url) >= 0);
                },
                callCount: 4
            });

            addon.addCss('../assets/css/global.css');
            addon.addCss('./assets/css/top.css');
            addon.addCss('Microframe/assets/css/top.css');
            addon.addCss('http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css');

            /* verify mocks expectations */
            YUITest.Mock.verify(this.ac);
            YUITest.Mock.verify(this.ac.assets);
        },

        'test addon:addCss:prod': function () {
            var addon = this.init();

            this.ac.assets.expect({
                method: 'addCss',
                args: [YUITest.Mock.Value.String, undefined],
                run: function (url) {
                    A.isTrue(['http://l.yimg.com/ep/cx/p/microframe/unit-test/global.css', 'http://l.yimg.com/ep/cx/p/microframe/unit-test/top.css', 'http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css'].indexOf(url) >= 0);
                },
                callCount: 4
            });

            addon.addCss('../assets/css/global.css');
            addon.addCss('./assets/css/top.css');
            addon.addCss('Microframe/assets/css/top.css');
            addon.addCss('http://yui.yahooapis.com/3.5.1/build/cssreset/cssreset-min.css');

            // verify mocks expectations
            YUITest.Mock.verify(this.ac);
            YUITest.Mock.verify(this.ac.assets);
        },

        'test addon:addJs:dev': function () {
            var addon = this.init('dev');

            this.ac.assets.expect({
                method: 'addJs',
                args: [YUITest.Mock.Value.String, undefined],
                run: function (url) {
                    A.isTrue(['/static/MicroframeUnitTest/assets/js/app.js', '/static/Microframe/assets/js/top.js', 'http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js'].indexOf(url) >= 0);
                },
                callCount: 4
            });

            addon.addJs('../assets/js/app.js');
            addon.addJs('./assets/js/top.js');
            addon.addJs('Microframe/assets/js/top.js');
            addon.addJs('http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js');

            /* verify mocks expectations */
            YUITest.Mock.verify(this.ac);
            YUITest.Mock.verify(this.ac.assets);
        },

        'test addon:addJs:prod': function () {
            var addon = this.init();

            this.ac.assets.expect({
                method: 'addJs',
                args: [YUITest.Mock.Value.String, undefined],
                run: function (url) {
                    A.isTrue(['http://l.yimg.com/ep/cx/p/microframe/unit-test/app.js', 'http://l.yimg.com/ep/cx/p/microframe/unit-test/top.js', 'http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js'].indexOf(url) >= 0);
                },
                callCount: 4
            });

            addon.addJs('../assets/js/app.js');
            addon.addJs('./assets/js/top.js');
            addon.addJs('Microframe/assets/js/top.js');
            addon.addJs('http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js');

            // verify mocks expectations
            YUITest.Mock.verify(this.ac);
            YUITest.Mock.verify(this.ac.assets);
        },

        'test addon:addBinder:addConfig': function () {
            var addon = this.init();

            addon.addBinderConfig(true);

            A.isObject(this.ac.assets.assets.binderConfig);
            A.isNotNull(this.ac.assets.assets.binderConfig[this.defaultCommand.instance.instanceId]);
            A.areSame(true, this.ac.assets.assets.binderConfig[this.defaultCommand.instance.instanceId]);
        },

        'test addon:addBinder:prod:customConfig': function () {
            var addon = this.init(),
                customConfig = {
                    title: 'Test'
                };

            addon.addBinderConfig(customConfig);

            A.isObject(this.ac.assets.assets.binderConfig);
            A.isNotNull(this.ac.assets.assets.binderConfig[this.defaultCommand.instance.instanceId]);
            A.areSame(customConfig, this.ac.assets.assets.binderConfig[this.defaultCommand.instance.instanceId]);
        },

        'test addon:addBinder:customSelector': function () {
            var addon = this.init();

            addon.addBinderSelector('#node');

            A.isObject(this.ac.assets.assets.binderSelector);
            A.isNotNull(this.ac.assets.assets.binderSelector[this.defaultCommand.instance.instanceId]);
            A.areSame('#node', this.ac.assets.assets.binderSelector[this.defaultCommand.instance.instanceId]);
        },

        'test addon:getUrl:customPrefix': function () {
            var addon = this.init('dev', 'path-to-assets/subdir');

            A.areSame('/path-to-assets/subdir/MicroframeUnitTest/assets/css/global.css', addon.getUrl('../assets/css/global.css'));
            A.areSame('/path-to-assets/subdir/Microframe/assets/js/top.js', addon.getUrl('./assets/js/top.js'));
            A.areSame('/path-to-assets/subdir/Microframe/assets/js/bottom.js', addon.getUrl('Microframe/assets/js/bottom.js'));
            A.areSame('http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js', addon.getUrl('http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js'));
        },

        'test addon:addBlob': function () {
            var addon = this.init();

            this.ac.assets.expect({
                method: 'addBlob',
                args: ['Test Blob Contents', undefined],
                callCount: 1
            });

            addon.addBlob('Test Blob Contents');

            /* verify mocks expectations */
            YUITest.Mock.verify(this.ac);
            YUITest.Mock.verify(this.ac.assets);
        },

        'test addon:extraModules': function () {
            var addon;

            this.ac.app.config.staticHandling.modules = ['custom_module', 'non_existent_module']; /* it should load custom_module and don't break if the other doesn't exist. */

            addon = this.init();

            A.areSame('', addon.getUrl(''));
        }

    }));

    YUITest.TestRunner.add(suite);

}, '0.0.1', {requires: ['mojito-test', 'micro-addon']});
